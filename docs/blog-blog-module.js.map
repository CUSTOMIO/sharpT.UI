{"version":3,"sources":["./src/app/blog/material-elevation.directive.ts","./src/app/blog/blog-routing.module.ts","./src/app/blog/blog.component.html","./src/app/blog/blog.component.ts","./src/app/blog/blog.module.ts","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js","./src/app/blog/blog-view/blog-view.component.html","./src/app/blog/blog-view/blog-view.component.ts"],"names":[],"mappings":"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AC7B,CAAC;;0EAvBU,aAAa;6FAAb,aAAa;QDR1B,yGAoBM;QAEN,mIAA4E;;QAtB7C,4FAAwB;QAsBf,0DAAe;QAAf,+EAAe;;;;;;;;;;;;;;AErBvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAEQ;AACqB;AACA;AACR;;;AAiB7D,MAAM,UAAU;;oEAAV,UAAU;yFAAV,UAAU;8FAJV,EACV,YAXQ;YACP,4DAAY;YACZ,sEAAiB;YACjB,kEAAY;SACb;mIAUU,UAAU,kFAPnB,wFAA0B;QAC1B,gFAAiB,aAPjB,4DAAY;QACZ,sEAAiB;QACjB,kEAAY;;;;;;;;;;;;;ACZhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAC0H;;AAErK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,6BAA6B,sDAAe,CAAC,wDAAQ,GAAG;AACxG,kBAAkB,wEAAkB,EAAE,wCAAwC,sBAAsB,8DAAQ,CAAC,wDAAQ,GAAG,EAAE,wCAAwC;AAClK;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AAC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","file":"blog-blog-module.js","sourcesContent":["import { Directive, ElementRef, HostListener, Input, Renderer2, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMaterialElevation]'\r\n})\r\nexport class MaterialElevationDirective implements OnChanges {\r\n\r\n  @Input()\r\n  defaultElevation = 2;\r\n\r\n  @Input()\r\n  raisedElevation = 4;\r\n\r\n  constructor(\r\n    private element: ElementRef,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.setElevation(this.defaultElevation);\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges) {\r\n    this.setElevation(this.defaultElevation);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter() {\r\n    this.setElevation(this.raisedElevation);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave() {\r\n    this.setElevation(this.defaultElevation);\r\n  }\r\n\r\n  setElevation(amount: number) {\r\n    // remove all elevation classes\r\n    const classesToRemove = Array.from((<HTMLElement>this.element.nativeElement).classList).filter(c => c.startsWith('mat-elevation-z'));\r\n    classesToRemove.forEach((c) => {\r\n      this.renderer.removeClass(this.element.nativeElement, c);\r\n    });\r\n\r\n    // add the given elevation class\r\n    const newClass = `mat-elevation-z${amount}`;\r\n    this.renderer.addClass(this.element.nativeElement, newClass);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BlogViewComponent } from './blog-view/blog-view.component';\r\n\r\n// Views\r\nimport { BlogComponent } from './blog.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BlogComponent,\r\n  },\r\n  {\r\n    path: ':id',\r\n    component: BlogViewComponent,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ]\r\n})\r\nexport class BlogRoutingModule { }\r\n\r\nexport const routedComponents = [\r\n  BlogComponent,\r\n];\r\n\r\n","<div class=\"m-20 mt-50 pb-20\" *ngIf=\"blog && !isLoading\">\r\n  <div class=\"blog-div\" *ngFor=\"let b of blog\">\r\n    <mat-card appMaterialElevation class=\"card-blog\" style=\"max-width: 90%;\">\r\n      <mat-card-header class=\"mt-10\">\r\n        <mat-card-title [innerHtml]=\"b.title\">\r\n          Hello there\r\n        </mat-card-title>\r\n        <mat-card-subtitle [innerHtml]=\"b.published\" class=\"pt-5\"></mat-card-subtitle>\r\n        <div class=\"icon\">\r\n          <mat-icon (click)=\"newTab(b.url)\" matTooltip=\"open in blogger\">open_in_new</mat-icon>\r\n        </div>\r\n      </mat-card-header>\r\n      <mat-card-content class=\"border-top pt-20\" [innerHtml]=\"b.content\">\r\n        <p> body text </p>\r\n      </mat-card-content>\r\n      <mat-card-actions class=\"pb-8\" align=\"right\">\r\n        <button mat-button style=\"background-color: #f2eee6;\" [routerLink]=\"[b.id]\">Read</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n\r\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"isLoading\"></mat-progress-bar>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { BlogService } from '../core/data-service';\r\n\r\n@Component({\r\n  selector: 'app-blog',\r\n  templateUrl: './blog.component.html',\r\n  styleUrls: ['./blog.component.scss']\r\n})\r\nexport class BlogComponent implements OnInit {\r\n  bloggerLink: string;\r\n  public blog: Array<object>;\r\n  isLoading: boolean = true;\r\n\r\n\r\n  constructor(\r\n    private blogService: BlogService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.blogService.getBlog().subscribe(res => {\r\n      console.log(res);\r\n      this.blog = res;\r\n      this.isLoading = false\r\n      }, (error) => {\r\n        console.log(`THis is the error: ${error}`)\r\n      });\r\n\r\n  }\r\n\r\n  newTab(url) {\r\n    window.open(url, \"_blank\");\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { BlogRoutingModule, routedComponents } from './blog-routing.module';\r\nimport { MaterialElevationDirective } from './material-elevation.directive';\r\nimport { BlogViewComponent } from './blog-view/blog-view.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BlogRoutingModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    routedComponents,\r\n    MaterialElevationDirective,\r\n    BlogViewComponent\r\n  ],\r\n  providers: [\r\n  ]\r\n})\r\n\r\nexport class BlogModule { }\r\n\r\n","import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nClipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n//# sourceMappingURL=clipboard.js.map","<div class=\"main\" *ngIf=\"!isLoading\">\r\n  <div class=\"img-div\">\r\n    <!-- <img src=\"assets/blog.png\" /> -->\r\n  </div>\r\n  <div class=\"container\" align=\"left\" *ngIf=\"blog\">\r\n    <div class=\"top-div\">\r\n      <mat-icon routerLink=\"..\" matTooltip=\"go back\">arrow_back</mat-icon>\r\n      <mat-icon class=\"icon-share\" (click)=\"copyLink()\" matTooltip=\"copy link\">share</mat-icon>\r\n    </div>\r\n    <div class=\"content\">\r\n      <p class=\"mat-display-1 mt-10 mb-10\" [innerHtml]=\"blog.title\"></p>\r\n      <mat-divider></mat-divider>\r\n      <p class=\"mat-subheading-2 pt-25\" [innerHtml]=\"blog.content\"></p>\r\n      <p class=\"mat-caption pl-10 pt-10\" [innerHtml]=\"blog.published\" align=\"right\"></p>\r\n      <p class=\"mat-title\" align=\"right\">- <span [innerHtml]=\"blog.author.displayName\"></span></p>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n\r\n<!--<mat-spinner *ngIf=\"isLoading\"></mat-spinner>-->\r\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"isLoading\"></mat-progress-bar>\r\n\r\n\r\n<!--<iframe src=\"https://sharptutorials-howto.blogspot.com/2021/06/this-is-second-post.html\" allowFullscreen=\"\" height=\"100%\" width=\"100%\"></iframe>-->\r\n","import { Component, OnInit, OnDestroy} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BlogService } from '../../core/data-service';\r\nimport { Clipboard } from '@angular/cdk/clipboard';\r\n\r\n@Component({\r\n  selector: 'app-blog-view',\r\n  templateUrl: './blog-view.component.html',\r\n  styleUrls: ['./blog-view.component.scss']\r\n})\r\nexport class BlogViewComponent implements OnInit {\r\n\r\n  bodyTag: HTMLBodyElement = document.getElementsByTagName('body')[0];\r\n\r\n  blogId: number;\r\n  blog: object;\r\n\r\n  isLoading: boolean = true;\r\n\r\n  constructor(private activatedRoute: ActivatedRoute,\r\n    private blogService: BlogService,\r\n    private clipboard: Clipboard) { }\r\n\r\n  ngOnInit() {\r\n    this.bodyTag.classList.add('main');\r\n\r\n    this.activatedRoute.params.subscribe(params => {\r\n      this.blogId = params.id;\r\n    });\r\n    this.blogService.getBlogbyId(this.blogId).subscribe(res => {\r\n      this.blog = res;\r\n      setTimeout(() => {\r\n        this.isLoading = false;\r\n    }, 500);\r\n    }, (error) => {\r\n      console.log(`THis is the error: ${error}`)\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.bodyTag.classList.remove('main');\r\n  }\r\n\r\n\r\n  copyLink() {\r\n    this.clipboard.copy(window.location.href)\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}