{"version":3,"sources":["./src/app/core/data-service/auth/auth.service.ts","./src/app/core/system-service/notification.service.ts","./src/app/verify/verify.component.ts","./src/app/verify/verify.component.html"],"names":[],"mappings":"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","file":"default~course-course-module~results-results-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { environment } from '../../../../environments/environment';\r\nimport { VerifyOtp } from '../../model';\r\nimport { map,catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AuthService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public generateOtp(email: string) {\r\n    const model = {\r\n      email: email\r\n    }\r\n    const url = `${environment.api_endpoint}/generate-otp`;\r\n    return this.http.post<typeof model>(url, model)\r\n  }\r\n\r\n  public VerifyOtp(form: VerifyOtp) {\r\n    const url = `${environment.api_endpoint}/verify-otp`;\r\n    return this.http.post<VerifyOtp[]>(url, form).\r\n    pipe(\r\n      map((data: any) => {\r\n        return data;\r\n      }), catchError( error => {\r\n        return throwError( 'Something went wrong!' );\r\n      })\r\n   )\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { SystemNotification, AlertType } from '../model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NotificationService {\r\n    private subject = new Subject<SystemNotification>();\r\n    private keepAfterRouteChange = false;\r\n\r\n    constructor(private router: Router) {\r\n        // clear alert messages on route change unless 'keepAfterRouteChange' flag is true\r\n        this.router.events.subscribe(event => {\r\n            if (event instanceof NavigationStart) {\r\n                if (this.keepAfterRouteChange) {\r\n                    // only keep for a single route change\r\n                    this.keepAfterRouteChange = false;\r\n                } else {\r\n                    // clear alert messages\r\n                    this.clear();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // enable subscribing to alerts observable\r\n    onAlert(alertId?: string): Observable<SystemNotification> {\r\n        return this.subject.asObservable().pipe(filter(x => x && x.alertId === alertId));\r\n    }\r\n\r\n    // convenience methods\r\n    show(alertType: AlertType, message: string, alertId?: string) {\r\n        const p = new SystemNotification({ message, type: alertType, alertId });\r\n        this.notify(p);\r\n    }\r\n\r\n    // main alert method\r\n    notify(alert: SystemNotification) {\r\n        console.log(alert);\r\n        this.keepAfterRouteChange = alert.keepAfterRouteChange;\r\n        this.subject.next(alert);\r\n    }\r\n\r\n    // clear alerts\r\n    clear(alertId?: string) {\r\n        this.subject.next(new SystemNotification({ alertId }));\r\n    }\r\n}","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { AuthService } from '../core/data-service/auth/auth.service';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-verify',\r\n  templateUrl: './verify.component.html',\r\n  styleUrls: ['./verify.component.scss'],\r\n})\r\nexport class VerifyComponent implements OnInit {\r\n\r\n  public verifyForm: FormGroup;\r\n  public successMessage: object;\r\n  public errorMessage: boolean;\r\n  public isVerified: boolean = false;\r\n  public verifyMessage: object;\r\n  public isLoading: boolean = false;\r\n  public clicked: boolean = false;\r\n\r\n\r\n  constructor(private authService: AuthService,\r\n    private formbuilder: FormBuilder,\r\n    @Inject(MAT_DIALOG_DATA) public data: { email: string, sendEmail: boolean },\r\n    private dialogRef: MatDialogRef<VerifyComponent>) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.data.sendEmail) {\r\n      this.generateOtp();\r\n    };\r\n    this.verifyForm = this.formbuilder.group({\r\n      otp: [null, [Validators.required]],\r\n      email: [this.data.email, [Validators.required]],\r\n    })\r\n\r\n  }\r\n\r\n  generateOtp() {\r\n    this.isLoading = true;\r\n    this.authService.generateOtp(this.data.email)\r\n      .subscribe({\r\n        next: data => {\r\n          if (data) {\r\n            this.successMessage = data;\r\n            this.isLoading = false;\r\n          }\r\n        },\r\n        error: error => {\r\n          if (error) {\r\n            this.errorMessage = true;\r\n            this.isLoading = false;\r\n            console.log(this.errorMessage)\r\n          }\r\n        }\r\n      })\r\n  }\r\n\r\n  verifyOtp() {\r\n    this.isLoading = true;\r\n\r\n    this.authService.VerifyOtp(this.verifyForm.value)\r\n      .subscribe({\r\n        next: data => {\r\n          this.isLoading = false;\r\n          if (data.message) {\r\n            this.verifyMessage = data.message;\r\n            this.closeDialog();\r\n          }\r\n          if (data.error) {\r\n            this.errorMessage = data.error;\r\n            this.clicked = false;\r\n          }\r\n        },\r\n        error: error => {\r\n          console.log('This is err' + error)\r\n          this.clicked = false;\r\n          this.isLoading = false;\r\n          this.errorMessage = true;\r\n        }\r\n      })\r\n  }\r\n\r\n  closeDialog(): void {\r\n    if (this.verifyMessage !== null) {\r\n      this.dialogRef.close({\r\n        data: { otp: this.verifyForm.controls.otp.value, message: this.verifyMessage}\r\n      });\r\n    }\r\n   else this.dialogRef.close({ data: '' });\r\n  }\r\n}\r\n\r\n\r\n","<div class=\"verify-body\">\r\n    <mat-progress-bar mode=\"indeterminate\" *ngIf=\"isLoading\"></mat-progress-bar>\r\n  <div class=\"top-div\">\r\n    <h1 mat-dialog-title>Verify Email</h1>\r\n    <mat-icon class=\"close-button\" (click)=\"closeDialog()\">close</mat-icon>\r\n  </div>\r\n  <div mat-dialog-content>\r\n    <p class=\"mat-caption\">Once your email is verified, you cannot change the form</p>\r\n    <p *ngIf=\"successMessage\" [innerHtml]=\"successMessage.message\"></p>\r\n    <form [formGroup]=\"verifyForm\">\r\n      <mat-form-field class=\"m-mq-auto\" appearance=\"standard\">\r\n        <mat-label>Type your OTP here</mat-label>\r\n        <input matInput type=\"text\"\r\n               inputmode=\"numeric\"\r\n               autocomplete=\"one-time-code\"\r\n               pattern=\"\\d{6}\"\r\n               formControlName=\"otp\">\r\n      </mat-form-field>\r\n      <button class=\"m-mq-auto\"\r\n              type=\"submit\"\r\n              mat-flat-button\r\n              (click)=\"verifyOtp(); clicked = true;\"\r\n              [disabled]=\"!verifyForm.valid || clicked\"\r\n              color=\"primary\">Verify OTP</button>\r\n    </form>\r\n    <p *ngIf=\"verifyMessage\" [innerHtml]=\"verifyMessage.message\"></p>\r\n    <span *ngIf=\"errorMessage\" class=\"error-msg\" [innerHtml]=\"errorMessage\"></span>\r\n      <p class=\"resend-container\">Didn't recieve? <span class=\"resend\" (click)=\"generateOtp()\">Resend</span></p>\r\n  </div>\r\n</div>\r\n\r\n"],"sourceRoot":"webpack:///"}